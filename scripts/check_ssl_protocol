#!/usr/bin/env bash
#
# BSD 3-Clause License
#
# Copyright (c) 2016 - 2023, Â© Badassops LLC / Luc Suryo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#*
#* File			:	check_ssl_protocol
#*
#* Description	:	script to check ssl protocols supported by the given website
#*
#* Author		:	Luc Suryo <luc@basassops.com>
#*
#* Version		:	0.2
#*
#* Date			:	Jul 4, 2023
#*
#* History	:
#*		Date:			Author:		Info:
#*		Jun 25, 2016	LIS			First Release
#*		Jul 4, 2023		LIS			added options IPv6
#*
#* IPv6 allocation https://www.iana.org/assignments/ipv6-unicast-address-assignments/ipv6-unicast-address-assignments.xhtml

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 2016 - $(date "+%Y") (c) badassops LLC"
_license='License BSD, http://www.freebsd.org/copyright/freebsd-license.html'
_version='0.2'
_email='luc@basassops.com'
_summary='script to check ssl protocols supported by the given website'
_cancelled='OK : Process has been cancelled on your request.'
_info="$_program $_version\n$_copyright\n$_license\n\nWritten by $_author <$_email>\n$_summary\n"

# defined return values
_state_ok=0 ; _state_ok_msg='OK'
_state_critical=2 ; _state_critical_msg='CRITICAL'

# color :)
# Reset
_color_off='\033[0m'		# Text Reset

# Bold
_color_black='\033[1;30m'	# Black
_color_red='\033[1;31m'		# Red
_color_green='\033[1;32m'	# Green
_color_yellow='\033[1;33m'	# Yellow
_color_blue='\033[1;34m'	# Blue
_color_purple='\033[1;35m'	# Purple
_color_cyan='\033[1;36m'	# Cyan
_color_white='\033[1;37m'	# White

# working variables
_opid=$$
_work_dir=/tmp/"$_program"
_tmp_file="$_work_dir"/"$_program"-"$_opid".lock
_lockfile="$_work_dir"/"$_program".LOCK
_send_alert="false"
_echo_flag='-e'
_my_website=
_my_header=
_my_timeout=5
_my_count=1
_regex_ipv4='^(0*(1?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))\.){3}'
_regex_ipv4+='0*(1?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))$'
_regex_ipv6='^2[0-9a-fA-F]{3}([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$'
_my_ip_prot="ipv4"
_ipVersion="IPv4"
_valid_ip_prot="ipv4 ipv6"
# protocl sslv2 sslv3 tlsv1 tlsv1.0 are long gone!
# note some site will redirect to tlsv1.3 and report tlsv1 for tlsv1.2!
_valid_protocols_flags=" tlsv1 tlsv1.1 tlsv1.2 tlsv1.3 "
_curl_flags="-v --insecure"

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

function inthandler() {
	kill -TERM $_spid
	_print_it warning "$_cancelled"
	exit $_state_ok
}

function counter() {
	local delay=0.75
	local spincnt=$1
	local _cnt=1
	_checkMark="\e[0;32m\xE2\x9C\x94\e[0m"
	while [ 1 ]; do
		printf "\e[s"
		printf "  \e[1;35m[%s]${_checkMark}" "$_cnt"
		sleep $delay
		let _cnt++
		if (( $_cnt == $spincnt )) ; then
			break
		fi
		printf "\e[u\e[0K"
	done
	printf "\e[u\e[0K"
}

function _print_it() {
	local _info_mode=$1
	shift
	case $_info_mode
	in
		# argument given none color
		ok)			printf "${_color_green}%s${_color_off}\n" "$*" 2>&1 ;;
		warning)	printf "${_color_yellow}%s${_color_off}\n" "$*" 2>&1 ;;
		error)		printf "${_color_red}%s${_color_off}\n" "$*" 2>&1 ;;
		Help)		printf "${_color_yellow}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		help)		printf "${_color_cyan}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		ignore)		printf "${_color_purple}" ; echo -e "$*" ; printf "${_color_off}" 2>&1 ;;
		# no new line and no color
		entry)		echo -en "$*" 2>&1 ;;
		# reset screen
		reset)		printf "${_color_off}\n" 2>&1 ;;
		# default
		*)			printf "${_color_cyan}%s${_color_off}\n" "$*" 2>&1 ;;
	esac
	return 0
}

function help() {
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	_print_it Help "$_info"
	_print_it help "Usage : $_program [-h] [ option ... ]"
	_print_it help " Options:"
	_print_it help " --(s)ite sitename   site to check, require, default to ${_my_website:-no default}"
    _print_it help " --(h)ost value      hostname in header, should be set if IP address with the --site flag"
    _print_it help " --(i)pv value       valid : $_valid_ip_prot, default to ${_my_ip_prot:-no default}"
    _print_it help " --(t)imeout value   timeout in seconds, default to ${_my_timeout:-no default}"
    _print_it help " -v Show version."
    _print_it help " -h Show this page."
	exit $1
}

function get_given_options() {
	local _option_website=0	; local _option_header=0
	local _option_ip=0		; local _option_timeout=0
	local _has_error=0		;
	while [[ -n "$1" ]]
	do
		case "$1" in
			'--site'|'-s')		_my_website="$2"	; shift ; let _option_website++ ;;

			'--host'|'--header'|'-H')
								_my_header="$2"		; shift ; let _option_header++ ;;

			'--ipv'|'-i')		_my_ip_prot=$2		; shift ; let _option_ip++
								case $_my_ip_prot
								in
									ipv4)	_curl_flags="$_curl_flags --ipv4" ;;
									ipv6)	_curl_flags="$_curl_flags --ipv6"
											_ipVersion="IPv6"
											;;
									*)	_print_it error "Given IP version $_my_ip_prot, is not supported"
										let _has_error++
										;;
								esac
								;;


			'--timeout'|'-t')	_my_timeout="$2"	; shift ; let _option_timeout++ ;;
			'-version'|'-v')	echo $_echo_flag "$_version" ; exit $_state_ok ; ;;

			*)	help 0 ;; # Which includes -h and --help
		esac
		shift
	done

	(( $_option_website != 1 )) && _print_it error "Mandatory --site option omitted or given more then once." && let _has_error++
	(( $_option_header > 1 )) && _print_it error "option --header can only be given once." && let _has_error++
	(( $_option_ip > 1 )) && _print_it error "option --ipv can only be given once." && let _has_error++
	(( $_option_timeout > 1 )) && _print_it error "option --timeout can only be given once." && let _has_error++

	if [[ "$_my_website" =~ $_regex_ipv4 ]] || [[ "$_my_website" =~ $_regex_ipv6 ]] ; then
		 _print_it info "Site was given as an IP address"
		if (( $_option_header != 1 )) ; then
			_print_it warning "option header should be use with IP"
		else
			_curl_flags+=" --header \"Host: $_my_header\""
		fi
		# need to adjust for IPv6
		if [[ "$_my_website" =~ $_regex_ipv6 ]] ; then
			_my_website="[$_my_website]"
			_ipVersion="IPv6"
			_curl_flags+=" --ipv6"
		fi
	fi
	# finalized the curl flah
	_curl_flags+=" --connect-timeout $_my_timeout"

	(( $_has_error != 0 )) && help $_has_error
	return 0
}

function check_it() {

	# make sure we can connect to the given website
	curl -o /dev/null $_curl_flags "https://$_my_website" >/dev/null 2>&1
	if (( $? != 0 )) ; then
		_print_it error "* site $_my_website does not exist or is not reachable, aborting... *"
		return 255
	fi

	_print_it ignore "\tchecking supported ssl protocols of https://$_my_website ($_ipVersion)"
	echo -en "\n${_color_cyan}Connection time in second :${_color_off}"
	# we need to set value high enough
	counter $(($_my_timeout * 10)) &
	_pid=$!

	local _supported=
	local _not_supported=
	for _proto in ${_valid_protocols_flags[@]}
	do
		# curl per protocol to be checked
		curl $_curl_flags --"$_proto" $_my_timeout "https://$_my_website" 2>&1 |\
			awk 'BEGIN { cert=0 } /^\* SSL connection/ { cert=1 } /^\*/ { if (cert) print }' 2>/dev/null |\
			grep -i $_proto > /dev/null 2>&1
		if (( $? == 0 )) ; then
			_supported="$_supported $_proto"
		else
			_not_supported="$_not_supported $_proto"
		fi 
		# sleep a bit, we might get blocked is we try too many time
		sleep 2
	done
	kill -9 $_pid
	_print_it ignore "\n---\n"
	_print_it ignore "\tsuported protocols\t: $_supported"
	_print_it ignore "\tnot supported protocl\t: $_not_supported"	
	_print_it help "\tSome site will redirect to tlsv1.3 when checking for tlsv1.2"
	_print_it ignore "\n---\n"

	return 0
}

function main() {
	local _var_exit=$_state_ok
	get_given_options $@

	_print_it info "---" "$(date) Process starting"
	check_it
	_var_exit=$?

	trap 1 2 3 4 5 9 10 12 15 23 24 25
	case $_var_exit
	in
		0)	_print_it info "Process completed, result == $_var_exit"
			_print_it ok "---" "$(date) $_program $_state_ok_msg : succesful" ;;

		*)	_print_it info "Process completed, result == $_var_exit"
			_print_it error "---" "$(date) $_program $_state_critical_msg : has failed"
			send_alert ;;
	esac
	exit $_var_exit
}
main $@
